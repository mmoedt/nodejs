#!/bin/bash

# Load helper functions and globals; note that the function 'run-do-script' still needs to be called
source ./.do.sh

# Environment setup:  (Needed for most functions)  but quietly
ENV_FILE="${ENV_FILE:-my-env.sh}"
if [ -e "${ENV_FILE}" ]; then
    debug 1 "Loading environment settings from '${ENV_FILE}'.."
    # shellcheck source=./my-env.sh
    QUIET=1  # enh: quiet++
    source "${ENV_FILE}" > /dev/null
    QUIET=0
fi

#
# Helper functions
#
banner() {
    if [ -x $(which figlet) ]; then
        figlet "$@"
    else
        echo "####################"
        echo "$@"
        echo "####################"
    fi
}

orm() {
    yarn typeorm -d ./src/database/dataSource.ts $@
}

#
# Commands (functions starting with 'do-')
#

do-help() {
    show_usage
    # Append a little extra info:
    cat <<EOF

Environment variables used:
   ENV_FILE: [default: my-env.sh]
       - bash script sourced (if it exists) to load your particular environment variables & overrides
EOF
}

do-build() {
    deno buld
}

do-start() {
    deno install &&
        deno build &&
        deno task dev
}

do-run() {
    deno task dev
}

do-pre-push() {
    deno install
    deno format
    deno lint
    deno build
    deno task tests

    banner pre-push done
}

do-tests() {
    true &&
        banner test:unit &&
        deno task test:unit &&
        banner test:integration &&
        deno task test:integration
}

env-tests() {
    debug 1 "No environment tests currently defined.  Proceeding..."
    # Maybe double-check NPM_TREEZ_TOKEN, availability or version of npm or yarn, etc.

    return 0
}

# Run the script using all the above defined functions
run-do-script $@
